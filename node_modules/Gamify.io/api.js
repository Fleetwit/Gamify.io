var _ 					= require('underscore');
var file 				= require('./file.js').main;
var stack 				= require('./stack.js').main;

function api() {
	
	
}
api.prototype.init = function(callback) {
	var scope 		= this;
	this.endpoints 	= {};
	this.outputs 	= {};
	
	var scanStack	= new stack();
	
	// List the endpoints map the methods
	scanStack.add(function(params, onProcessed) {
		file.listFiles("./api/endpoints","js", function(endpoints) {
			console.log("Endpoints (files):\n",endpoints);
			var i;
			var m;
			for (i=0;i<endpoints.length;i++) {
				var includepath				= endpoints[i].substr(0,endpoints[i].length-3);
				var	parts					= includepath.split("/");
				var urlpath					= parts[parts.length-1];
				var methods 				= require('../../'+includepath).methods;
				scope.endpoints[urlpath] 	= {};
				for (m in methods) {
					//app.get('/'+urlpath+'/'+m, Gamify.execute(urlpath, m));
					scope.endpoints[urlpath][m] = methods[m];
				}
			}
			console.log("Endpoints (mapping):\n",scope.endpoints);
			onProcessed();
		});
	},{});
	
	// List the output methods
	scanStack.add(function(params, onProcessed) {
		file.listFiles("./api/output","js", function(outputs) {
			console.log("Output (files):\n",outputs);
			var i;
			var m;
			for (i=0;i<outputs.length;i++) {
				var includepath				= outputs[i].substr(0,outputs[i].length-3);
				var	parts					= includepath.split("/");
				var urlpath					= parts[parts.length-1];
				var method 					= require('../../'+includepath).output;
				scope.outputs[urlpath]		= method;
			}
			console.log("Outputs (mapping):\n",scope.outputs);
			onProcessed();
		});
	},{});
	
	// Process the stack, async
	scanStack.process(callback, true);
}
api.prototype.execute = function(endpoint, method, data, callback, format, req, res) {
	console.log("execute()",endpoint, method, data, format);
	
	if (!this.endpoints[endpoint]) {
		console.log("No such endpoint: ",endpoint);
		return false;
	}
	if (!this.endpoints[endpoint][method]) {
		console.log("No such method: ",endpoint+'.'+method);
		return false;
	}
	var response	= this.endpoints[endpoint][method](data);
	console.log("Response:\n",response);
	
	// Default output format
	if (!format) {
		format = 'json';
	}
	if (res) {
		this.outputs[format](response, res, data);
	}
	if (callback) {
		callback(response);
	}
}

exports.main = api;